# Creates a 4 node privacy-enabled Raft network.  Each node is managed by its own Node Manager.
version: "3.6"
x-quorum-def:
    &quorum-def
    restart: "no"
    image: quorumengineering/quorum:20.10.0
    expose:
        - "21000"
        - "50400"
    healthcheck:
        test: [ "CMD", "wget", "--spider", "--proxy", "off", "http://localhost:8545" ]
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 5s
    entrypoint:
        - /bin/sh
        - -c
        - |
            TESSERA_IPC=/qdata/tessera/tm.ipc
            RETRY=10

            for i in $$(seq 1 100)
                do
                set -e
                if [ -S $${TESSERA_IPC} ] && \
                    [ "I'm up!" == "$$(wget --timeout $${RETRY} -qO- --proxy off tessera$${NODE_ID}:9000/upcheck)" ];
                then break
                else
                    echo "Waiting for Tessera..."
                    sleep $${RETRY}
                fi
            done

            RESOURCES=/resources/goquorum
            DDIR=/qdata/goquorum

            rm -rf $${DDIR}
            mkdir -p $${DDIR}/keystore
            mkdir -p $${DDIR}/geth
            cp $${RESOURCES}/raft/nodekey$${NODE_ID} $${DDIR}/nodekey
            cp $${RESOURCES}/keys/key$${NODE_ID} $${DDIR}/keystore/
            cp $${RESOURCES}/permissioned-nodes.json $${DDIR}/permissioned-nodes.json
            cp $${RESOURCES}/permissioned-nodes.json $${DDIR}/static-nodes.json
            cp $${RESOURCES}/genesis.json $${DDIR}
            cp $${RESOURCES}/passwords.txt $${DDIR}

            NETWORK_ID=$$(cat $${RESOURCES}/genesis.json | grep chainId | awk -F " " '{print $$2}' | awk -F "," '{print $$1}')
            geth --datadir $${DDIR} init $${RESOURCES}/genesis.json
            PRIVATE_CONFIG=$${TESSERA_IPC} geth \
                --identity node$${NODE_ID}-raft \
                --datadir $${DDIR} \
                --permissioned \
                --nodiscover \
                --verbosity 5 \
                --networkid $${NETWORK_ID} \
                --rpc \
                --rpccorsdomain "*" \
                --rpcvhosts "*" \
                --rpcaddr 0.0.0.0 \
                --rpcport 8545 \
                --rpcapi admin,eth,debug,miner,net,shh,txpool,personal,web3,quorum,raft \
                --port 21000 \
                --unlock 0 \
                --allow-insecure-unlock \
                --nousb \
                --password $${DDIR}/passwords.txt \
                --raft --raftport 50400
x-tessera-def:
    &tessera-def
    image: quorumengineering/tessera:20.10.0
    expose:
        - "9000"
        - "9080"
    restart: "no"
    healthcheck:
        test: [ "CMD-SHELL", "[ -S /qdata/tessera/tm.ipc ] || exit 1" ]
        interval: 3s
        timeout: 3s
        retries: 20
        start_period: 5s
    entrypoint:
        - /bin/sh
        - -c
        - |
            RESOURCES=/resources/tessera
            DDIR=/qdata/tessera
            rm -rf $${DDIR}
            mkdir -p $${DDIR}

            cp $${RESOURCES}/keys//$${NODE_ID}.pub $${DDIR}
            cp $${RESOURCES}/keys/$${NODE_ID}.key $${DDIR}

            cat <<EOF > $${DDIR}/tessera-config.json
            {
                "useWhiteList": false,
                "jdbc": {
                    "username": "sa",
                    "password": "",
                    "url": "jdbc:h2:$${DDIR}/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
                    "autoCreateTables": true
                },
                "serverConfigs":[
                    {
                        "app":"ThirdParty",
                        "serverAddress": "http://nodemanager$${NODE_ID}:9080",
                        "bindingAddress": "http://tessera$${NODE_ID}:9080",
                        "communicationType" : "REST"
                    },
                    {
                        "app":"Q2T",
                        "serverAddress": "unix:$${DDIR}/tm.ipc",
                        "communicationType" : "REST"
                    },
                    {
                        "app":"P2P",
                        "serverAddress": "http://nodemanager$${NODE_ID}:9000",
                        "bindingAddress": "http://tessera$${NODE_ID}:9000",
                        "communicationType" : "REST"
                    }
                ],
                "peer": [
                    {
                        "url": "http://nodemanager1:9000"
                    },
                    {
                        "url": "http://nodemanager2:9000"
                    },
                    {
                        "url": "http://nodemanager3:9000"
                    },
                    {
                        "url": "http://nodemanager4:9000"
                    }
                ],
                "keys": {
                    "passwords": [],
                    "keyData": [
                        {
                            "publicKeyPath": "$${DDIR}/$${NODE_ID}.pub",
                            "privateKeyPath": "$${DDIR}/$${NODE_ID}.key"
                        }
                    ]
                },
                "alwaysSendTo": []
            }
            EOF
            cat $${DDIR}/tessera-config.json
            java -Xms128M -Xmx128M -jar /tessera/tessera-app.jar --configfile $${DDIR}/tessera-config.json --debug

x-node-manager-def:
    &node-manager-def
    image: quorumengineering/node-manager:21.01.0
    restart: "no"
    expose:
        - "9000"
        - "9080"
    healthcheck:
        test: [ "CMD", "curl", "-H", "\"Content-Type:application/json\"", "-d", "'{\"jsonrpc\":2.0, \"id\":1, \"method\":\"node.IsNodeUp\", \"params\":[]}'", "http://localhost:8081"]
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 5s
    entrypoint:
        - /bin/sh
        - -c
        - |
            apk add curl

            TESSERA_IPC=/qdata/tessera/tm.ipc
            GOQUORUM_IPC=/qdata/goquorum/geth.ipc
            RETRY=10

            for i in $$(seq 1 100)
                do
                set -e
                if [ -S $${TESSERA_IPC} ] && [ -S $${GOQUORUM_IPC} ]
                then break
                else
                    echo "Waiting for Tessera & GoQuorum..."
                    sleep $${RETRY}
                fi
            done

            DDIR=/qdata/nodemanager

            rm -rf $${DDIR}
            mkdir -p $${DDIR}

            cat <<EOF > $${DDIR}/peers-config.json
            {
            	"peers": [
            	    {
            	    	"name": "node1",
            	    	"privacyManagerKey": "oNspPPgszVUFw0qmGFfWwh1uxVUXgvBxleXORHj07g8=",
            	    	"rpcUrl": "http://localhost:8081"
            	    },
            	    {
            	    	"name": "node2",
            	    	"privacyManagerKey": "QfeDAys9MPDs2XHExtc84jKGHxZg/aj52DTh0vtA3Xc=",
            	    	"rpcUrl": "http://localhost:8082"
            	    },
            	    {
            	    	"name": "node3",
            	    	"privacyManagerKey": "1iTZde/ndBHvzhcl7V68x44Vx7pl8nwx9LqnM/AfJUg=",
            	    	"rpcUrl": "http://localhost:8083"
            	    },
            	    {
            	    	"name": "node4",
            	    	"privacyManagerKey": "1iTZde/ndBHvzhcl7V68x44Vx7pl8nwx9LqnM/AfJUg=",
            	    	"rpcUrl": "http://localhost:8084"
            	    }
            	]
            }
            EOF
            cat $${DDIR}/peers-config.json

            cat <<EOF > $${DDIR}/node-manager-config.json
            {
                "name": "node1",
                "upcheckPollingInterval": 1,
                "peersConfigFile": "$${DDIR}/peers-config.json",
                "inactivityTime": 60,
                "disableStrictMode": true,
                "proxies": [
                    {
                        "name": "geth-rpc",
                        "type": "http",
                        "proxyAddress": "0.0.0.0:9091",
                        "upstreamAddress": "http://quorum$${NODE_ID}:8545",
                        "proxyPaths": ["/"],
                        "readTimeout": 15,
                        "writeTimeout": 15
                    },
                    {
                        "name": "tessera",
                        "type": "http",
                        "proxyAddress": "0.0.0.0:9391",
                        "upstreamAddress": "http://tessera$${NODE_ID}:9000",
                        "proxyPaths": ["/"],
                        "ignorePathsForActivity": ["/upcheck", "/partyinfo", "/partyinfo/validate"],
                        "readTimeout": 15,
                        "writeTimeout": 15
                    }
                ],
                "server": {
                    "rpcAddress": "0.0.0.0:8081",
                    "rpcCorsList": ["*"],
                    "rpcvHosts": ["*"]
                },
                "blockchainClient": {
                    "type": "goquorum",
                    "consensus": "raft",
                    "rpcUrl": "http://quorum$${NODE_ID}:8545",
                    "process": {
                        "name": "bcclnt",
                        "controlType": "docker",
                        "containerId": "quorum$${NODE_ID}",
                        "upcheckConfig": {
                            "url": "http://quorum$${NODE_ID}:8545",
                            "method": "POST",
                            "body": "{\"jsonrpc\":\"2.0\", \"method\":\"eth_blockNumber\", \"params\":[], \"id\":67}",
                            "returnType": "rpcresult"
                        }
                    }
                },
                "privacyManager": {
                    "publicKey": "BULeR8JyUWhiuuCMU/HLA0Q5pzkYT+cHII3ZKBey3Bo=",
                    "process": {
                        "name": "privman",
                        "controlType": "docker",
                        "containerId": "tessera$${NODE_ID}",
                        "upcheckConfig": {
                            "url": "http://tessera$${NODE_ID}:9000/upcheck",
                            "method": "GET",
                            "body": "",
                            "returnType": "string",
                            "expected": "I'm up!"
                        }
                    }
                }
            }
            EOF
            cat $${DDIR}/node-manager-config.json
            node-manager --config $${DDIR}/node-manager-config.json --verbosity 3

services:
    quorum1:
        <<: *quorum-def
        hostname: quorum1
        volumes:
            - vol1:/qdata
            - ./resources/goquorum:/resources/goquorum:ro
        depends_on:
            - tessera1
        environment:
            - NODE_ID=1
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.11
    quorum2:
        <<: *quorum-def
        hostname: quorum2
        volumes:
            - vol2:/qdata
            - ./resources/goquorum:/resources/goquorum:ro
        depends_on:
            - tessera2
        environment:
            - NODE_ID=2
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.12
    quorum3:
        <<: *quorum-def
        hostname: quorum3
        volumes:
            - vol3:/qdata
            - ./resources/goquorum:/resources/goquorum:ro
        depends_on:
            - tessera3
        environment:
            - NODE_ID=3
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.13
    quorum4:
        <<: *quorum-def
        hostname: quorum4
        volumes:
            - vol4:/qdata
            - ./resources/goquorum:/resources/goquorum:ro
        depends_on:
            - tessera4
        environment:
            - NODE_ID=4
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.14
    tessera1:
        <<: *tessera-def
        hostname: tessera1
        volumes:
            - vol1:/qdata
            - ./resources/tessera:/resources/tessera:ro
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.101
        environment:
        - NODE_ID=1
    tessera2:
        <<: *tessera-def
        hostname: tessera2
        volumes:
            - vol2:/qdata
            - ./resources/tessera:/resources/tessera:ro
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.102
        environment:
            - NODE_ID=2
    tessera3:
        <<: *tessera-def
        hostname: tessera3
        volumes:
            - vol3:/qdata
            - ./resources/tessera:/resources/tessera:ro
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.103
        environment:
            - NODE_ID=3
    tessera4:
        <<: *tessera-def
        hostname: tessera4
        volumes:
            - vol4:/qdata
            - ./resources/tessera:/resources/tessera:ro
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.104
        environment:
            - NODE_ID=4
    nodemanager1:
        <<: *node-manager-def
        hostname: nodemanager1
        depends_on:
            - quorum1
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.201
        environment:
            - NODE_ID=1
        volumes:
            - vol1:/qdata
    nodemanager2:
        <<: *node-manager-def
        hostname: nodemanager2
        depends_on:
            - quorum2
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.202
        environment:
            - NODE_ID=2
        volumes:
            - vol2:/qdata
    nodemanager3:
        <<: *node-manager-def
        hostname: nodemanager3
        depends_on:
            - quorum3
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.203
        environment:
            - NODE_ID=3
        volumes:
            - vol3:/qdata
    nodemanager4:
        <<: *node-manager-def
        hostname: nodemanager4
        depends_on:
            - quorum4
        networks:
            node-manager-example-net:
                ipv4_address: 172.10.203.204
        environment:
            - NODE_ID=4
        volumes:
            - vol4:/qdata

networks:
    node-manager-example-net:
        name: node-manager-example-net
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.10.203.0/24

volumes:
    "vol1":
    "vol2":
    "vol3":
    "vol4":
